{"name":"CRAPpy","tagline":"A simulation-game where scripted robots fight to the robot-death.","body":"Computerized-Robot-Arena-Program\r\n================================\r\n\r\nCRAP is a competitive coding challenge which has two or more coders write the behavior code for robots on a field of battle.\r\n\r\nLatest Release: [v0.1.3](https://github.com/CSSDePaul/Computerized-Robot-Arena-Program/releases/tag/v0.1.3)\r\n\r\nWith the release of v0.1.0 the game is now runable from the command line (no graphical interface yet, learn to use the CLI you NUB). To have two scripts duke it out, navigate to the directory containing the Computerized-Robot-Arena-Program directory and your two scripts, and run `python Computerized-Robot-Arena-Program script1.py script2.py`. \r\n\r\n**Note**: CRAPpy requires python 3.3+, so you might have to run `python3.3 Computerized-Robot-Arena-Program script1.py script2.py` depending on your local python install.\r\n\r\n![](http://i.imgur.com/cK0tYOY.png)\r\n\r\n## Writing Scripts\r\n\r\nThe basic structure of a robot behavior script is as follows:\r\n\r\n```python\r\nclass robotBehavior:\r\n\r\n\tdef decideAction(self, robot, board, actions):\r\n\t\t'''\r\n\t\tReturns one of the elements in actions.\r\n\t\t'''\r\n\t\t\r\n\t\tchosen_action = 0\r\n\t\t\r\n\t\t# some logic to choose the action you want\r\n\t\t\r\n\t\treturn actions[chosen_action]\r\n\t\t\r\n\tdef __init__(self):\r\n\t\tpass\r\n```\r\n\r\nBehavior scripts have to be wrapped in a class called `robotBehavior` and have a function `decideAction` which takes in the object representing the robot, an object representing the board, and a list with strings representing the acations the robot are allowed to take. `decideAction` should be the element of _actions_ representing the action you want the robot to take.\r\n\r\n### Actions\r\n\r\nThe robots can take the following actions:\r\n\r\n* **Move Forward** (MOVE_FORWARD) - The robot moves one space in the direction its currently facing.\r\n* **Turn Left** (TURN_LEFT) - The robot turns 90 degrees to the left (anti-clockwise).\r\n* **Turn Right** (TURN_RIGHT) - The robot turns 90 degrees to the right (clockwise).\r\n* **Fire Projectile** (FIRE_PROJECTILE) - The robot fires a projectile directly in front of itself, moving in the direction the robot is facing.\r\n\r\n### Example Scripts\r\n\r\nCRAPpy comes with several example scripts used for testing and debugging which define very basic strategies and give examples of how to use the API to write behavioral scripts. Here are a few:\r\n\r\n#### randomScript.py\r\n\r\nThis script randomly chooses one of the available options.\r\n\r\n```python\r\nimport random\r\n\r\nclass robotBehavior:\r\n\r\n\t# Returns a string from Board.MOVEFUNCTIONS.keys()\r\n\t# this is the action the agent decided to take\r\n\t# the human player uploads a script that is called by this action \r\n\tdef decideAction(self, robot, board, actions):\r\n\t\t'''\r\n\t\tReturns the alias to a random movement function in the robot class\r\n\t\t'''\r\n\t\treturn random.choice(actions)\r\n\t\t\r\n\tdef __init__(self):\r\n\t\tpass\r\n```\r\n\r\n#### smartRandomScript.py\r\n\r\nsmartRandomScript is an improvement over randomScript, which won't suicidally walk into an occupied space.\r\n\r\n```python\r\nimport random\r\nimport utility\r\n\r\nclass robotBehavior:\r\n\r\n\t# Returns a string from Board.MOVEFUNCTIONS.keys()\r\n\t# this is the action the agent decided to take\r\n\t# the human player uploads a script that is called by this action \r\n\tdef decideAction(self, robot, board, actions):\r\n\t\t'''\r\n\t\tReturns the alias to a random movement function in the robot class\r\n\t\t'''\r\n\t\t\r\n\t\tchoice = random.choice(actions)\r\n\t\tif (choice == 'MOVE_FORWARD'):\r\n\t\t\t\r\n\t\t\tforwardLoc = utility.forwardCoords(robot.xPosition, robot.yPosition, robot.rotation, board)\r\n\t\t\t\r\n\t\t\tisOccupied = board.occupied(forwardLoc[0],forwardLoc[1])\r\n\t\t\tif (isOccupied is None):\r\n\t\t\t\t#space in front is outside the board\r\n\t\t\t\treturn 'TURN_RIGHT'\r\n\t\t\tif (isOccupied):\r\n\t\t\t\t#if something is in front, shoot at it\r\n\t\t\t\treturn 'SHOOT_PROJECTILE'\r\n\t\t\telse:\r\n\t\t\t\t#if something isn't in front, move forward\r\n\t\t\t\treturn 'MOVE_FORWARD'\r\n\t\t\r\n\t\treturn choice\r\n\t\t\r\n\tdef __init__(self):\r\n\t\tpass\r\n```\r\n\r\n#### directWalk.py\r\n\r\nThis robot picks the first other robot on the field and walks into it so that both of them are destroyed.\r\n\r\n```python\r\n'''\r\nCreated on Mar 12, 2014\r\n\r\n@author: excaliburhissheath\r\n'''\r\n\r\nfrom utility import forwardCoords, manhattanDistance\r\n\r\nclass robotBehavior:\r\n    '''\r\n    A behavior that make the robot walk in a straight line towards the closest robot.\r\n    '''\r\n\r\n    def decideAction(self, robot, board, actions):\r\n        '''\r\n        Walks towards the other robot and tries to run into it.\r\n        '''\r\n        \r\n        # get the list of robots from the board\r\n        robots = board.getRobots()\r\n        robotKeys = list(robots.keys())\r\n        \r\n        # temporary hacky workaround\r\n        # get the other robot (future versions should find the closest robot)\r\n        closest = robots[robotKeys[0]]\r\n        \r\n        # if first robot is this robot, get second robot\r\n        if robotKeys[0] == robot.name:\r\n            closest = robots[robotKeys[1]]\r\n        \r\n        # get current distance to target robot\r\n        currentDistance = manhattanDistance(robot, closest)\r\n        \r\n        # get coordinates of space in front of robot\r\n        forwardPos = forwardCoords(robot.xPosition, robot.yPosition, robot.rotation)\r\n        \r\n        # get distance of forwardPos from target\r\n        forwardDistance = manhattanDistance(forwardPos, closest)\r\n        \r\n        # if forward gets robot closer to target, move forward\r\n        if forwardDistance < currentDistance:\r\n            return 'MOVE_FORWARD'\r\n        # otherwise turn right\r\n        else:\r\n            return 'TURN_RIGHT'\r\n\r\n    def __init__(self):\r\n        pass\r\n```\r\n\r\n## More Information\r\n\r\nFor more information see [the wiki](https://github.com/CSSDePaul/Computerized-Robot-Arena-Program/wiki).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}